import time
import pyvisa as visa
import pylab as pl
import numpy as np
import sys
import csv

visaResourceAddr = 'USB::0x0699::0x03C4::C020748::INSTR'

rm = visa.ResourceManager()
scope = rm.open_resource(visaResourceAddr)

print(scope.query('*IDN?'))
scope.write("*CLS")
scope.write('header 0')
scope.write('WFMO:ENC BIN')
scope.write("*ESR?")
print(scope.query("EVM?"))
scope.write('SELect:FFT ON')
print(scope.query("FFT?"))
scope.write('ACQuire:MODe SAMple')
scope.write('DATA:WIDTH 1')
scope.write('ACQuire:STATE RUN')
print(scope.query('ACQuire:STOPA?'))
print(scope.query('ACQuire:STATE?'))
scope.write('DATA:SOURCE FFT')
scope.write('DATA:START 1')
scope.write('DATA:STOP 2000')
print(scope.query('WFMO:BYT_N?;NR_P?;YOF?;YMU?;YZE?;XIN?;XZE?'))
values = np.array(scope.query_binary_values('CURV?', datatype='b'))
print(values)
print(np.size(values))
print(np.max(values))

values = values.tolist()
print(np.max(values))
# print(values)
# with open('output.csv', 'w') as outFile:
#     writer = csv.writer(outFile)
#     for num in values:
#         writer.writerows(num)


import time
import pyvisa as visa
import pylab as pl
import numpy as np
import sys
visaResourceAddr = 'USB::0x0699::0x03C4::C020748::INSTR'

rm = visa.ResourceManager()
scope = rm.open_resource(visaResourceAddr)

np.set_printoptions(threshold=sys.maxsize)

scope.timeout = 10000 # ms
scope.encoding = 'latin_1'
scope.read_termination = '\n'
scope.write_termination = None
# scope.write('*cls') # clear ESR

print(scope.query('*idn?'))

#scope.write('*rst') # reset
# t1 = time.perf_counter()
# r = scope.query('*OPC?') # sync
# t2 = time.perf_counter()
# print('reset time: {} s'.format(t2 - t1))

# scope.write('autoset EXECUTE') # autoset
# t3 = time.perf_counter()
# r = scope.query('*OPC?') # sync
# t4 = time.perf_counter()
# print('autoset time: {} s'.format(t4 - t3))
print(scope.query('HORizontal?'))

#print(scope.query('MEASUrement:IMMed:AREa'))

# io config
scope.write('header 0')
scope.write('data:encdg RIBINARY')
scope.write('data:source FFT') # channel
# scope.write('data:start 1') # first sample
record = int(scope.query('wfminpre:nr_pt?'))
print(record)
scope.write('data:stop {}'.format(record)) # last sample
# scope.write('wfmpre:byt_nr 1') # 1 byte per sample

# acq config
scope.write('acquire:state 0') # stop # single
scope.write('acquire:state 1') # run
scope.write('acquire:stopafter RUNSTop')
# scope.write('acquire:stopafter runstop')
t5 = time.perf_counter()
# r = scope.query('*opc?') # sync
t6 = time.perf_counter()
print('acquire time: {} s'.format(t6 - t5))

# data query
t7 = time.perf_counter()
bin_wave = scope.query_binary_values('curve?', datatype='b', container=np.array)
t8 = time.perf_counter()
print(bin_wave)
print('transfer time: {} s'.format(t8 - t7))

# retrieve scaling factors
tscale = float(scope.query('wfmpre:xincr?'))
tstart = float(scope.query('wfmpre:xzero?'))
vscale = float(scope.query('wfmpre:ymult?')) # volts / level
voff = float(scope.query('wfmpre:yzero?')) # reference voltage
vpos = float(scope.query('wfmpre:yoff?')) # reference position (level)

# error checking
r = int(scope.query('*esr?'))
print('event status register: 0b{:08b}'.format(r))
r = scope.query('allev?').strip()
print('all event messages: {}'.format(r))

scope.close()
rm.close()

# create scaled vectors
# horizontal (time)
total_time = tscale * record
tstop = tstart + total_time
#scaled_time = np.linspace(tstart, tstop, num=record, endpoint=False)
scaled_time = np.linespace(0, 2000)
# vertical (voltage)
unscaled_wave = np.array(bin_wave, dtype='float') # data type conversion
scaled_wave = (unscaled_wave - vpos) * vscale + voff
print(scaled_wave)
print(np.max(scaled_wave))
print(np.size(scaled_wave))


# plotting
pl.step(scaled_time, scaled_wave)
pl.plot(scaled_time, scaled_wave)
pl.title('channel 1') # plot label
pl.xlabel('freq') # x label
pl.ylabel('intensity') # y label
print("\nlook for plot window...")
pl.show()

import time
import pyvisa as visa
import pylab as pl
import numpy as np
import sys
visaResourceAddr = 'USB::0x0699::0x03C4::C020748::INSTR'

rm = visa.ResourceManager()
scope = rm.open_resource(visaResourceAddr)

scope.timeout = 10000 # ms
scope.encoding = 'latin_1'
scope.read_termination = '\n'
scope.write_termination = None
# scope.write('*cls') # clear ESR

print(scope.query('*idn?'))

#scope.write('*rst') # reset
# t1 = time.perf_counter()
# r = scope.query('*OPC?') # sync
# t2 = time.perf_counter()
# print('reset time: {} s'.format(t2 - t1))

# scope.write('autoset EXECUTE') # autoset
# t3 = time.perf_counter()
# r = scope.query('*OPC?') # sync
# t4 = time.perf_counter()
# print('autoset time: {} s'.format(t4 - t3))
print(scope.query('HORizontal?'))

print(scope.query('MEASUrement:IMMed:AREa'))

# io config
scope.write('header 0')
scope.write('data:encdg RIBINARY')
scope.write('data:source FFT') # channel
scope.write('data:start 1') # first sample
record = int(scope.query('wfmpre:nr_pt?'))
scope.write('data:stop {}'.format(record)) # last sample
scope.write('wfmpre:byt_nr 1') # 1 byte per sample

# acq config
scope.write('acquire:state 0') # stop
scope.write('acquire:stopafter SEQUENCE') # single
scope.write('acquire:state 1') # run
# scope.write('acquire:stopafter runstop')
# time.sleep(2)
t5 = time.perf_counter()
r = scope.query('*opc?') # sync
t6 = time.perf_counter()
print('acquire time: {} s'.format(t6 - t5))

# data query
t7 = time.perf_counter()
bin_wave = scope.query_binary_values('curve?', datatype='b', container=np.array)
t8 = time.perf_counter()
print('transfer time: {} s'.format(t8 - t7))

# retrieve scaling factors
tscale = float(scope.query('wfmpre:xincr?'))
tstart = float(scope.query('wfmpre:xzero?'))
vscale = float(scope.query('wfmpre:ymult?')) # volts / level
voff = float(scope.query('wfmpre:yzero?')) # reference voltage
vpos = float(scope.query('wfmpre:yoff?')) # reference position (level)

# error checking
r = int(scope.query('*esr?'))
print('event status register: 0b{:08b}'.format(r))
r = scope.query('allev?').strip()
print('all event messages: {}'.format(r))

scope.close()
rm.close()

# create scaled vectors
# horizontal (time)
total_time = tscale * record
tstop = tstart + total_time
scaled_time = np.linspace(tstart, tstop, num=record, endpoint=False)
# vertical (voltage)
unscaled_wave = np.array(bin_wave, dtype='float') # data type conversion
scaled_wave = (unscaled_wave - vpos) * vscale + voff
np.set_printoptions(threshold=sys.maxsize)
print(scaled_wave)
print(np.max(scaled_wave))
print(np.size(scaled_wave))


# plotting
pl.step(scaled_time, scaled_wave)
pl.plot(scaled_time, scaled_wave)
pl.title('channel 1') # plot label
pl.xlabel('freq') # x label
pl.ylabel('intensity') # y label
print("\nlook for plot window...")
pl.show()
